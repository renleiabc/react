{"version":3,"sources":["asyncComponent.js","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","importComponent","_Component","AsyncComponent","props","_this","Object","F_react_simple_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","F_react_simple_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","F_react_simple_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","component","F_react_simple_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","F_react_simple_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","_this2","then","mod","setState","default","C","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Component","AsyncHome","__webpack_require__","e","bind","AsyncLogin","App","react_default","BrowserRouter","Switch","Route","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gJAgCeA,IAxBf,SAAwBC,GAsBtB,OAtBuC,SAAAC,GAErC,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,MAHIR,EAFkB,OAAAC,OAAAQ,EAAA,EAAAR,CAAAH,EAAAD,GAAAI,OAAAS,EAAA,EAAAT,CAAAH,EAAA,EAAAa,IAAA,oBAAAC,MAAA,WAQjB,IAAAC,EAAAV,KAClBP,IAAkBkB,KAAK,SAAAC,GACrBF,EAAKG,SAAS,CAEZR,UAAWO,EAAIE,QAAUF,EAAIE,QAAUF,QAZR,CAAAJ,IAAA,SAAAC,MAAA,WAkBnC,IAAMM,EAAIf,KAAKI,MAAMC,UACrB,OAAOU,EAAIC,EAAAC,EAAAC,cAACH,EAAMf,KAAKJ,OAAY,SAnBAD,EAAA,CACVwB,+NCLzBC,EAAY5B,YAAe,kBAAM6B,EAAAC,EAAA,GAAAX,KAAAU,EAAAE,KAAA,YACjCC,EAAahC,YAAe,kBAAM6B,EAAAC,EAAA,GAAAX,KAAAU,EAAAE,KAAA,YAgBzBE,mLAZX,OACEC,EAAAT,EAAAC,cAACS,EAAA,EAAD,KACED,EAAAT,EAAAC,cAACU,EAAA,EAAD,KACEF,EAAAT,EAAAC,cAACW,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAI1B,UAAWe,IACjCM,EAAAT,EAAAC,cAACW,EAAA,EAAD,CAAOE,KAAK,SAAS1B,UAAWmB,IAChCE,EAAAT,EAAAC,cAACW,EAAA,EAAD,CAAOE,KAAK,SAAS1B,UAAWe,aAPxBD,aCKEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOZ,EAAAT,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.6e6ae32d.chunk.js","sourcesContent":["//代码分片\r\n/*\r\n当项目中使用React Router时， 一般会根据路由信息将项目代码分\r\n片， 每个路由依赖的代码单独打包成一个chunk文件。 我们创建一个函\r\n数统一处理这个逻辑：\r\n*/\r\nimport React, { Component } from 'react'\r\n// importComponent 是使用了import()的函数\r\nfunction asyncComponent(importComponent) {\r\n  class AsyncComponent extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        component: null // 动态加载的组件\r\n      }\r\n    }\r\n    componentDidMount() {\r\n      importComponent().then(mod => {\r\n        this.setState({\r\n          // 同时兼容ES6和CommonJS的模块\r\n          component: mod.default ? mod.default : mod\r\n        })\r\n      })\r\n    }\r\n    render() {\r\n      // 渲染动态加载的组件\r\n      const C = this.state.component\r\n      return C ? <C {...this.props} /> : null\r\n    }\r\n  }\r\n  return AsyncComponent\r\n}\r\nexport default asyncComponent\r\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport asyncComponent from './asyncComponent'\n//通过asyncComponent导入组件， 创建代码分片点\nconst AsyncHome = asyncComponent(() => import('./components/Home'))\nconst AsyncLogin = asyncComponent(() => import('./components/Login'))\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={AsyncHome} />\n          <Route path=\"/login\" component={AsyncLogin} />\n          <Route path=\"/posts\" component={AsyncHome} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./sass/index.scss\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}